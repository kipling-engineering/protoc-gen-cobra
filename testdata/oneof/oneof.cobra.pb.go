// Code generated by protoc-gen-cobra. DO NOT EDIT.

package oneof

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	common "github.com/NathanBaulch/protoc-gen-cobra/testdata/oneof/common"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func OneOfServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("OneOfService"),
		Short: "OneOfService service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_OneOfServiceOneOfCommand(cfg),
	)
	return cmd
}

func _OneOfServiceOneOfCommand(cfg *client.Config) *cobra.Command {
	req := &OneOfRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("OneOf"),
		Short: "OneOf RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "OneOfService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "OneOfService", "OneOf"); err != nil {
					return err
				}
			}

			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewOneOfServiceClient(cc)
				v := &OneOfRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)
				if cfg.PreSendHook != nil {
					cfg.PreSendHook(v)
				}

				res, err := cli.OneOf(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	_Paging := &common.PaginationRequest{}
	cmd.PersistentFlags().Int32Var(&_Paging.PageSize, cfg.FlagNamer("Paging PageSize"), 0, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Paging PageSize"), func() { req.Paging = _Paging })
	_Paging_PageToken := &common.PaginationRequest_PageToken{}
	cmd.PersistentFlags().StringVar(&_Paging_PageToken.PageToken, cfg.FlagNamer("Paging PageToken"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Paging PageToken"), func() { req.Paging = _Paging; _Paging.Value = _Paging_PageToken })
	_Paging_PageOffset := &common.PaginationRequest_PageOffset{}
	cmd.PersistentFlags().Int32Var(&_Paging_PageOffset.PageOffset, cfg.FlagNamer("Paging PageOffset"), 0, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Paging PageOffset"), func() { req.Paging = _Paging; _Paging.Value = _Paging_PageOffset })

	return cmd
}
