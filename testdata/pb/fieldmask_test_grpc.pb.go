// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: pb/fieldmask_test.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FieldMaskTestService_UpdateEntity_FullMethodName = "/pb.FieldMaskTestService/UpdateEntity"
)

// FieldMaskTestServiceClient is the client API for FieldMaskTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldMaskTestServiceClient interface {
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*Entity, error)
}

type fieldMaskTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldMaskTestServiceClient(cc grpc.ClientConnInterface) FieldMaskTestServiceClient {
	return &fieldMaskTestServiceClient{cc}
}

func (c *fieldMaskTestServiceClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, FieldMaskTestService_UpdateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldMaskTestServiceServer is the server API for FieldMaskTestService service.
// All implementations must embed UnimplementedFieldMaskTestServiceServer
// for forward compatibility.
type FieldMaskTestServiceServer interface {
	UpdateEntity(context.Context, *UpdateEntityRequest) (*Entity, error)
	mustEmbedUnimplementedFieldMaskTestServiceServer()
}

// UnimplementedFieldMaskTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFieldMaskTestServiceServer struct{}

func (UnimplementedFieldMaskTestServiceServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedFieldMaskTestServiceServer) mustEmbedUnimplementedFieldMaskTestServiceServer() {}
func (UnimplementedFieldMaskTestServiceServer) testEmbeddedByValue()                              {}

// UnsafeFieldMaskTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldMaskTestServiceServer will
// result in compilation errors.
type UnsafeFieldMaskTestServiceServer interface {
	mustEmbedUnimplementedFieldMaskTestServiceServer()
}

func RegisterFieldMaskTestServiceServer(s grpc.ServiceRegistrar, srv FieldMaskTestServiceServer) {
	// If the following call pancis, it indicates UnimplementedFieldMaskTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FieldMaskTestService_ServiceDesc, srv)
}

func _FieldMaskTestService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldMaskTestServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldMaskTestService_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldMaskTestServiceServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FieldMaskTestService_ServiceDesc is the grpc.ServiceDesc for FieldMaskTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FieldMaskTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FieldMaskTestService",
	HandlerType: (*FieldMaskTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateEntity",
			Handler:    _FieldMaskTestService_UpdateEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/fieldmask_test.proto",
}
