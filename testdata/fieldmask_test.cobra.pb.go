// Code generated by protoc-gen-cobra. DO NOT EDIT.

package pb

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func FieldMaskTestServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("FieldMaskTestService"),
		Short: "FieldMaskTestService service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_FieldMaskTestServiceUpdateEntityCommand(cfg),
	)
	return cmd
}

func _FieldMaskTestServiceUpdateEntityCommand(cfg *client.Config) *cobra.Command {
	req := &UpdateEntityRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("UpdateEntity"),
		Short: "UpdateEntity RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "FieldMaskTestService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "FieldMaskTestService", "UpdateEntity"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewFieldMaskTestServiceClient(cc)
				v := &UpdateEntityRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.UpdateEntity(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	_Entity := &Entity{}
	cmd.PersistentFlags().StringVar(&_Entity.Id, cfg.FlagNamer("Entity Id"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Entity Id"), func() { req.Entity = _Entity })
	cmd.PersistentFlags().StringVar(&_Entity.DisplayName, cfg.FlagNamer("Entity DisplayName"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Entity DisplayName"), func() { req.Entity = _Entity })
	cmd.PersistentFlags().Int32Var(&_Entity.Count, cfg.FlagNamer("Entity Count"), 0, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Entity Count"), func() { req.Entity = _Entity })
	_Entity_Nested := &NestedEntity{}
	cmd.PersistentFlags().StringVar(&_Entity_Nested.SubId, cfg.FlagNamer("Entity Nested SubId"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Entity Nested SubId"), func() { req.Entity = _Entity; _Entity.Nested = _Entity_Nested })
	cmd.PersistentFlags().StringVar(&_Entity_Nested.SubValue, cfg.FlagNamer("Entity Nested SubValue"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Entity Nested SubValue"), func() { req.Entity = _Entity; _Entity.Nested = _Entity_Nested })
	_UpdateMask := &fieldmaskpb.FieldMask{}
	cmd.PersistentFlags().StringSliceVar(&_UpdateMask.Paths, cfg.FlagNamer("UpdateMask Paths"), nil, "The set of field mask paths.")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("UpdateMask Paths"), func() { req.UpdateMask = _UpdateMask })

	return cmd
}
